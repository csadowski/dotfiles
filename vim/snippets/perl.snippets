# #!/usr/bin/env perl
snippet #!
	#!/usr/bin/env perl

	use warnings;
	use strict;


snippet template
	#!/usr/bin/perl

	# Force me to write this properly

	use strict;
	use warnings;

	# Modules

	use Carp;                                       # Built-in
	use English qw(-no_match_vars);                 # Built-in
	use Getopt::Long qw(:config no_ignore_case);    # Built-in
	use Pod::Usage;                                 # Built-in
	
	## no critic (RequireLocalizedPunctuationVars)
	BEGIN {
		$ENV{Smart_Comments} = " @ARGV " =~ /--debug/xms;
	}
	use Smart::Comments -ENV;                       # cpanm Smart::Comments

	our $VERSION = 0.1;

		GetOptions(
		'help|h'  => \my $help,
		'debug'   => \my $debug,                    # dummy variable
		'man'     => \my $man,
		'version' => \my $version,

	) or pod2usage( -verbose => 0 );

	if ($help) {
		pod2usage( -verbose => 0 );
	}
	if ($man) {
		pod2usage( -verbose => 2 );
	}
	if ($version) {
		die "$PROGRAM_NAME v$VERSION\n";
	}

	use Fcntl ':flock';

	open my $SELF, '<', $PROGRAM_NAME or croak "Program already running\n";
	flock $SELF, LOCK_EX | LOCK_NB or exit;
	close $SELF or croak $ERRNO;

	__END__

	=pod Changelog

	=begin comment

	Changelog:

	TBD

	=end comment

	=cut

	# Documentation
	=pod

	=head1 NAME

	Program - Does Stuff

	=head1 USAGE

		perl program.pl     [OPTION...]
		-h, --help          Display this help text
			--man           Displays the full embedded manual
			--version       Displays the version and then exits

	=head1 DESCRIPTION

	=head1 REQUIRED ARGUMENTS

	=head1 OPTIONS

	=head1 DIAGNOSTICS

	=head1 EXIT STATUS

	=head1 CONFIGURATION

	=head1 DEPENDENCIES

	=head1 INCOMPATIBILITIES
	
	=head1 BUGS AND LIMITATIONS

	None known.

	Report any bugs found to either the author or to the SmartSystems support
	account, <support@smartsystemsaz.com>

	=head1 AUTHOR

	Cory Sadowski <cory@smartsystemsaz.com>

	=head1 LICENSE AND COPYRIGHT

	=cut

# Hash Pointer
snippet .
	 =>
# Function
snippet sub
	sub ${1:function_name} {
		${2:#body ...}
	}
# Conditional
snippet if
	if (${1}) {
		${2:# body...}
	}
# Conditional if..else
snippet ife
	if (${1}) {
		${2:# body...}
	} else {
		${3:# else...}
	}
# Conditional if..elsif..else
snippet ifee
	if (${1}) {
		${2:# body...}
	} elsif (${3}) {
		${4:# elsif...}
	} else {
		${5:# else...}
	}
# Conditional One-line
snippet xif
	${1:expression} if ${2:condition};${3}
# Unless conditional
snippet unless
	unless (${1}) {
		${2:# body...}
	}
# Unless conditional One-line
snippet xunless
	${1:expression} unless ${2:condition};${3}
# Try/Except
snippet eval
	eval {
		${1:# do something risky...}
	};
	if ($@) {
		${2:# handle failure...}
	}
# While Loop
snippet wh
	while (${1}) {
		${2:# body...}
	}
# While Loop One-line
snippet xwh
	${1:expression} while ${2:condition};${3}
# For Loop
snippet for
	for (my $${2:var} = 0; $$2 < ${1:count}; $$2${3:++}) {
		${4:# body...}
	}
# Foreach Loop
snippet fore
	foreach my $${1:x} (@${2:array}) {
		${3:# body...}
	}
# Foreach Loop One-line
snippet xfore
	${1:expression} foreach @${2:array};${3}
# Package
snippet cl
	package ${1:ClassName};
	
	use base qw(${2:ParentClass});
	
	sub new {
		my $class = shift;
		$class = ref $class if ref $class;
		my $self = bless {}, $class;
		$self;
	}
	
	1;${3}
# Read File
snippet slurp
	my $${1:var};
	{ local $/ = undef; local *FILE; open FILE, "<${2:file}"; $$1 = <FILE>; close FILE }${3}
